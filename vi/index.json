[
{
	"uri": "//localhost:1313/vi/4-cicd/4.1-jenkins/",
	"title": "Cài đặt Jenkins",
	"tags": [],
	"description": "",
	"content": "Chạy các câu lệnh sau để cài đặt Jenkins:\nsudo apt update sudo apt install fontconfig openjdk-17-jre java -version openjdk version \u0026#34;17.0.8\u0026#34; 2023-07-18 OpenJDK Runtime Environment (build 17.0.8+7-Debian-1deb12u1) OpenJDK 64-Bit Server VM (build 17.0.8+7-Debian-1deb12u1, mixed mode, sharing) #jenkins sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \\ https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\ https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\ /etc/apt/sources.list.d/jenkins.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install jenkins sudo systemctl start jenkins sudo systemctl enable jenkins Sau khi cài đặt xong, hãy kiểm tra trạng thái của Jenkins bằng câu lệnh sau:\nsudo systemctl status jenkins Vậy là Jenkins đã được khởi chạy thành công.\nHãy nhớ tạo thêm một inbound rule cho phép truy cập vào port 8080 trên Security Group của EC2 instance.\nBây giờ, chúng ta sẽ truy cập vào Jenkins thông qua trình duyệt web với port 8080 và làm theo các bước hướng dẫn của Jenkins để lấy mật khẩu và cài đặt các plugin được yêu cầu.\nSau đó tạo một user mới và đăng nhập vào Jenkins.\n"
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.1-server/",
	"title": "Cài đặt server",
	"tags": [],
	"description": "",
	"content": " Cài đặt server Monitoring như bước Tạo EC2 instance để cài đặt Jenkins, SonarQube và Trivy\nTạo Elastic IP và gắn vào server Monitoring như bước Tạo Elastic IP cho EC2 instance\n"
},
{
	"uri": "//localhost:1313/vi/3-security/3.1-sonarqube/",
	"title": "Cài đặt SonarQube",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ cài đặt SonarQube trên EC2 instance đã tạo ở bước trước. Các bạn hãy chạy câu lệnh dưới đây để cài đặt SonarQube:\ndocker run -d --name sonar -p 9000:9000 sonarqube:lts-community Vậy là đã tạo xong một container SonarQube trên EC2 instance.\nHãy nhớ tạo thêm một inbound rule cho phép truy cập vào port 9000 trên Security Group của EC2 instance.\nBây giờ, chúng ta sẽ truy cập vào SonarQube thông qua trình duyệt web. Username và password mặc định để đăng nhập vào SonarQube cả hai đều là admin, sau đó hãy đổi password theo ý của mình.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "DevSecOps Pipeline",
	"tags": [],
	"description": "",
	"content": "DevSecOps Pipeline Project: Deploy ứng dụng với Amazon Elastic Kubernetes Service (EKS) Tổng quan Với project này, chúng ta sẽ host ứng dụng bằng các dịch vụ của AWS. Mục tiêu chính là triển khai DevSecOps Pipeline cho ứng dụng bao gồm CI/CD sử dụng Jenkins, Monitoring sử dụng Prometheus và Grafana, Security sử dụng SonarQube và Trivy và cuối cùng là deploy ứng dụng lên Amazon Elastic Kubernetes Service (EKS) bằng ArgoCD và Helm.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "DevSecOps là sự kết hợp của Development (phát triển), Security (bảo mật) và Operations (vận hành) nhằm tích hợp bảo mật vào mọi giai đoạn của quy trình phát triển phần mềm. DevSecOps pipeline mở rộng từ DevOps truyền thống bằng cách đưa các biện pháp bảo mật vào sớm và liên tục trong suốt vòng đời phát triển phần mềm, từ viết mã, xây dựng, kiểm thử đến triển khai và giám sát. Mục tiêu của DevSecOps là phát hiện và xử lý các lỗ hổng bảo mật nhanh chóng và hiệu quả hơn, giảm thiểu rủi ro trong quá trình phát triển và triển khai ứng dụng.\nƯu điểm của DevSecOps Pipeline:\nTăng cường bảo mật: Tích hợp bảo mật ngay từ đầu giúp phát hiện sớm các lỗ hổng và xử lý chúng trước khi triển khai, giảm thiểu nguy cơ bị tấn công. Tự động hóa kiểm thử bảo mật: Sử dụng các công cụ tự động như SAST (Static Application Security Testing), DAST (Dynamic Application Security Testing) và kiểm thử mã nguồn mở giúp phát hiện lỗi bảo mật liên tục và nhanh chóng. Rút ngắn thời gian triển khai: Bằng cách tích hợp bảo mật vào pipeline CI/CD, các quy trình kiểm thử bảo mật được tự động hóa, giúp đẩy nhanh tốc độ phát hành mà không bỏ qua yếu tố an toàn. Tiết kiệm chi phí: Phát hiện và sửa lỗi bảo mật sớm giúp giảm thiểu chi phí so với việc khắc phục sau khi ứng dụng đã đi vào hoạt động. Nâng cao nhận thức về bảo mật: Khuyến khích các nhóm phát triển, vận hành và bảo mật hợp tác chặt chẽ, nâng cao nhận thức và trách nhiệm về bảo mật trong toàn bộ tổ chức. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-createec2forjenkinssonarqubetrivy/",
	"title": "Tạo EC2 instance để cài đặt Jenkins, SonarQube và Trivy",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một EC2 instance để cài đặt Jenkins, SonarQube và Trivy.\nĐầu tiên, truy cập vào giao diện quản lý dịch vụ EC2 của AWS. Chọn Launch Instance để bắt đầu tạo một EC2 instance mới. Tại trang Launch an instance Đặt tên cho instance: Jenkins-SonarQube-Trivy Chọn Ubuntu AMI version 22 làm hệ điều hành cho EC2 instance. Chọn t2.large làm instance type. Ở phần Key Pair, chọn key pair đã tạo trước đó hoặc tạo mới một key pair. Ở phần Network settings, chọn VPC default và Public subnet default. Chọn Enable cho Auto-assign public IP và thêm inbound rule cho phương thức SSH. Trong phần Configure storage, nhập vào giá trị 25 GiB gp2 vì chúng ta sẽ cần một lượng lớn lưu trữ để cài đặt các plugins. Cuối cùng chọn Launch instance để tạo EC2 instance. Chờ giây lát để EC2 instance được tạo xong như hình dưới đây Nội dung Tạo VPC Tạo Public subnet Tạo Private subnet Tạo security group Tạo máy chủ Linux public Tạo máy chủ Windows private "
},
{
	"uri": "//localhost:1313/vi/7-ekssection/7.1-cluster/",
	"title": "Tạo EKS Cluster",
	"tags": [],
	"description": "",
	"content": "Ở bước này chúng ta sẽ tạo EKS Cluster bằng cách sử dụng eksctl.\nCần chuẩn bị cài đặt AWS CLI và eksctl, hãy tham khảo hướng dẫn cài đặt eksctl.\nĐầu tiên, cần tạo AWS access key để cấu hình AWS CLI tại đây\nCấu hình AWS access key cho AWS CLI: aws configure Tạo EKS cluster bằng cách sử dụng eksctl: eksctl create cluster --name=devsecops --region=ap-southeast-1 --fargate Kiểm tra trong console AWS CloudFormation để xem quá trình tạo EKS Cluster và chờ khoảng 15-20 phút đến khi quá trình tạo hoàn tất. Vậy là đã tạo thành công EKS Cluster bằng eksctl. Kiểm tra trên AWS Console để xem EKS Cluster đã được tạo thành công. "
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.2-plugins/",
	"title": "Cài đặt các plugins",
	"tags": [],
	"description": "",
	"content": "Truy cập vào Manage Jenkins -\u0026gt; Plugins -\u0026gt; Available plugins và cài đặt các plugin sau:\nEclipse Temurin Installer (Install without restart) SonarQube Scanner (Install without restart) NodeJs Plugin (Install Without restart) Email Extension Plugin "
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.2-prometheus/",
	"title": "Cài đặt Prometheus",
	"tags": [],
	"description": "",
	"content": "Connect vào server Monitoring thông qua SSH và thực hiện các bước sau:\nCập nhật các package trên server: sudo apt update -y Tạo một tài khoản hệ thống dành riêng cho Prometheus: sudo useradd --system --no-create-home --shell /bin/false prometheus Tải về tệp cài đặt Prometheus phiên bản 2.47.1 wget https://github.com/prometheus/prometheus/releases/download/v2.47.1/prometheus-2.47.1.linux-amd64.tar.gz Giải nén tệp cài đặt Prometheus: tar -xvf prometheus-2.47.1.linux-amd64.tar.gz Di chuyển vào thư mục Prometheus: cd prometheus-2.47.1.linux-amd64 Tạo thư mục lưu trữ dữ liệu và cấu hình: sudo mkdir -p /data /etc/prometheus Di chuyển các tệp thực thi: sudo mv prometheus promtool /usr/local/bin/ Di chuyển các tệp console: sudo mv consoles/ console_libraries/ /etc/prometheus/ Di chuyển tệp cấu hình: sudo mv prometheus.yml /etc/prometheus/prometheus.yml Cấp quyền sở hữu cho user prometheus với thư mục /data và /etc/prometheus: sudo chown -R prometheus:prometheus /etc/prometheus/ /data/ Tạo tệp cấu hình Systemd cho Prometheus: sudo vi /etc/systemd/system/prometheus.service Thêm nội dung sau vào file trên: Chỉ định User và Group là prometheus sẽ chạy dịch vụ Prometheus. ExecStart chỉ định đường dẫn đến tệp cấu hình Prometheus, thư mục lưu trữ dữ liệu, port lắng nghe và cổng web. web.listen-address chỉ định cổng lắng nghe của Prometheus. web.enable-lifecycle cho phép Prometheus sử dụng API để tương tác với các dịch vụ khác. [Unit] Description=Prometheus Wants=network-online.target After=network-online.target StartLimitIntervalSec=500 StartLimitBurst=5 [Service] User=prometheus Group=prometheus Type=simple Restart=on-failure RestartSec=5s ExecStart=/usr/local/bin/prometheus \\ --config.file=/etc/prometheus/prometheus.yml \\ --storage.tsdb.path=/data \\ --web.console.templates=/etc/prometheus/consoles \\ --web.console.libraries=/etc/prometheus/console_libraries \\ --web.listen-address=0.0.0.0:9090 \\ --web.enable-lifecycle [Install] WantedBy=multi-user.target Kích hoạt và khởi động dịch vụ Prometheus: sudo systemctl enable prometheus sudo systemctl start prometheus Kiểm tra trạng thái của dịch vụ Prometheus: sudo systemctl status prometheus Hãy nhớ tạo thêm một inbound rule cho phép truy cập vào port 9090 trên Security Group của server Monitoring.\nTruy cập vào trình duyệt và nhập địa chỉ IP public của server Monitoring kèm theo port 9090 để kiểm tra xem Prometheus đã chạy thành công hay chưa. "
},
{
	"uri": "//localhost:1313/vi/3-security/3.2-trivy/",
	"title": "Cài đặt Trivy",
	"tags": [],
	"description": "",
	"content": "Để cài đặt Trivy, hãy chạy câu lệnh sau trên EC2 instance:\nsudo apt-get install wget apt-transport-https gnupg lsb-release wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list sudo apt-get update sudo apt-get install trivy Sau khi cài đặt xong, hãy chạy câu lệnh sau để kiểm tra xem Trivy đã cài đặt thành công chưa:\ntrivy version Bây giờ, hãy thử scan repository của chúng ta bằng Trivy bằng cách chạy câu lệnh sau trong thư mục repository:\ntrivy fs . Kết quả sẽ hiển thị như sau:v\nTiếp theo, hãy thử scan một Docker image bằng Trivy bằng cách chạy câu lệnh sau:\ntrivy image \u0026lt;image-id\u0026gt; Như dưới đây là kết quả scan một Docker image:\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createeip/",
	"title": "Tạo Elastic IP cho EC2 instance",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tiến hành tạo Elastic IP cho EC2 instance. Elastic IP là một địa chỉ IP tĩnh được cung cấp bởi AWS. Elastic IP có thể được gán cho một EC2 instance để giữ cho địa chỉ public IP không thay đổi khi khởi động lại EC2 instance.\nĐầu tiên, truy cập vào giao diện quản lý Elastic IP Click Allocate Elastic IP address để tạo một địa chỉ Elastic IP mới. Trong phần Elastic IP address settings, chọn Amazon\u0026rsquo;s pool of IPv4 addresses và Network border group là ap-southeast-1 (Trùng với region tạo EC2 instance trước đó) rồi chọn Allocate. Elastic IP đã được tạo thành công. Click vào Actions và chọn Associate Elastic IP address để gán Elastic IP cho EC2 instance. Ở trang Asscociate Elastic IP address, chọn Instance cho Resource type và chọn instance vừa tạo ở bước trước sau đó chọn Associate. Tạo IAM Role Trong bước này chúng ta sẽ tiến hành tạo IAM Role. Trong IAM Role này sẽ được gán policy AmazonSSMManagedInstanceCore, đây là policy cho phép máy chủ EC2 có thể giao tiếp với Session Manager.\nTruy cập vào giao diện quản trị dịch vụ IAM Ở thanh điều hướng bên trái, click Roles. Click Create role. Click AWS service và click EC2. Click Next: Permissions. Trong ô Search, điền AmazonSSMManagedInstanceCore và ấn phím Enter để tìm kiếm policy này. Click chọn policy AmazonSSMManagedInstanceCore. Click Next: Tags. Click Next: Review. Đặt tên cho Role là SSM-Role ở Role Name Click Create Role . Tiếp theo chúng ta sẽ thực hiện kết nối đến các máy chủ EC2 chúng ta đã tạo bằng Session Manager.\n"
},
{
	"uri": "//localhost:1313/vi/7-ekssection/7.2-nodegroup/",
	"title": "Tạo Node Group",
	"tags": [],
	"description": "",
	"content": " Bây giờ, tạo Node Group cho EKS Cluster. Truy cập vào mục Compute và ở phần Node groups nhấn Add node group. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Thiết lập và triển khai",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tiến hành tạo EC2 instance, tạo Elastic IP và cài đặt Docker trên EC2 để thử nghiệm deploy Docker ở local thành công hay chưa sau đó tiến hành deploy tự động hoá với Jenkins.\nNội dung Tạo EC2 instance để cài đặt Jenkins, SonarQube và Trivy Tạo Elastic IP cho EC2 instance Kết nối vào EC2 instance "
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.3-nodeexporter/",
	"title": "Cài đặt Node Exporter",
	"tags": [],
	"description": "",
	"content": "Connect vào server Monitoring thông qua SSH và thực hiện các bước sau:\nTạo một tài khoản hệ thống dành riêng cho Prometheus: sudo useradd --system --no-create-home --shell /bin/false node_exporter Tải về tệp cài đặt Node Exporter phiên bản 1.6.1: wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz Giải nén tệp cài đặt Prometheus: tar -xvf node_exporter-1.6.1.linux-amd64.tar.gz Di chuyển file node_exporter vào thư mục /usr/local/bin/ và dọn dẹp các tệp và thư mục không còn cần thiết sau khi di chuyển: sudo mv node_exporter-1.6.1.linux-amd64/node_exporter /usr/local/bin/ rm -rf node_exporter* Tạo tệp cấu hình Systemd cho Node Exporter: sudo vi /etc/systemd/system/node_exporter.service Thêm nội dung sau vào file trên: Chỉ định User và Group là prometheus sẽ chạy dịch vụ Prometheus. ExecStart chỉ định đường dẫn đến tệp cấu hình Node Exporter, thư mục lưu trữ dữ liệu, port lắng nghe và cổng web. [Unit] Description=Node Exporter Wants=network-online.target After=network-online.target StartLimitIntervalSec=500 StartLimitBurst=5 [Service] User=node_exporter Group=node_exporter Type=simple Restart=on-failure RestartSec=5s ExecStart=/usr/local/bin/node_exporter --collector.logind [Install] WantedBy=multi-user.target Kích hoạt và khởi động dịch vụ Node Exporter: sudo systemctl enable node_exporter sudo systemctl start node_exporter Kiểm tra trạng thái của dịch vụ Prometheus: sudo systemctl status node_exporter Hãy nhớ tạo thêm một inbound rule cho phép truy cập vào port 9100 trên Security Group của server Monitoring.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.3-javanodejs/",
	"title": "Cấu hình Java và NodeJS trong Global Configuration",
	"tags": [],
	"description": "",
	"content": "Truy cập vào Manage Jenkins -\u0026gt; Tools.\nỞ mục JDK installations, chọn Add JDK. Đặt tên cho JDK là jdk17, chọn Install automatically và chọn tiếp Install from adoptium.net cho mục Add installer. Ở phần Version, chọn jdk-17.0.8.1+1. Ở mục NodeJS installations, chọn Add NodeJS. Đặt tên cho NodeJS là node16, chọn Version là 16.2.0. Cuối cùng, chọn Apply và Save để lưu cấu hình. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-clonecode/",
	"title": "Kết nối vào EC2 instance",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành kết nối vào EC2 instance bằng phương thức SSH.\nĐầu tiên các bạn hãy mở terminal và chuyển đến thư mục chứa file key pair đã tạo trước đó. Sử dụng lệnh sau để kết nối vào EC2 instance: ssh -i /path/key-pair-name.pem instance-user-name@instance-public-dns-name Cập nhật tất cả các packet trên máy chủ EC2 instance bằng lệnh sau: sudo apt update -y Clone code repository của chúng ta về EC2 instance bằng lệnh sau: git clone https://github.com/nghialmgcd201527/Workshop-DevSecOps.git Chuyển đến thư mục chứa code repository vừa clone về và kiểm tra xem đã có file Dockerfile chưa. cd Workshop-DevSecOps ls Để deploy ứng dụng bằng Dockerfile trên, chúng ta cần cài đặt Docker trên máy chủ EC2 instance: sudo apt-get update sudo apt-get install docker.io -y sudo usermod -aG docker $USER # Replace with your system\u0026#39;s username, e.g., \u0026#39;ubuntu\u0026#39; newgrp docker sudo chmod 777 /var/run/docker.sock Sau khi cài đặt xong Docker, chúng ta sẽ build Docker image từ Dockerfile: docker build -t workshop-devsecops . Chạy Docker container từ Docker image vừa build. docker run -d -p 8081:3000 workshop-devsecops:latest Vậy là chúng ta đã chạy Docker image thành công.\nTruy cập vào trình duyệt quản lý inbound rule của security group trong EC2 instance để mở port 8081 Truy cập vào mục Security của EC2 instance Click vào security group của EC2 instance Chọn Edit inbound rules và thêm một rule mới cho port 8081 sau đó chọn Save rules Truy cập vào trình duyệt và nhập địa chỉ IP public của EC2 instance kèm theo port 8081 để kiểm tra ứng dụng đã chạy thành công hay chưa. Vậy là chúng ta đã deploy Docker thành công ở local, có thể tiến hành thực hiện deploy tự động hoá từ đây.\n"
},
{
	"uri": "//localhost:1313/vi/3-security/",
	"title": "Security",
	"tags": [],
	"description": "",
	"content": "Trong project này, chúng ta sẽ dùng 2 tools cho security là SonarQube và Trivi.\nSonarQube là một công cụ quản lý chất lượng mã nguồn mã nguồn mở, giúp bạn theo dõi, quản lý và giảm thiểu rủi ro kỹ thuật trong mã nguồn của bạn.\nTrivy là một công cụ quét lỗ hổng bảo mật cho container, giúp bạn phát hiện các lỗ hổng bảo mật trong các image Docker.\nNội dung 3.1. Cài đặt SonarQube 3.2. Cài đặt Trivy\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.4-sonartoken/",
	"title": "Tạo SonarQube Token",
	"tags": [],
	"description": "",
	"content": "Quay lại giao diện chính của SonarQube, chọn Administration -\u0026gt; Security -\u0026gt; Users.\nChọn Token -\u0026gt; nhập tên cho token là jenkins -\u0026gt; Generate.\nCopy token vừa được tạo, truy cập lại giao diện của Jenkins, chọn Manage Jenkins -\u0026gt; Credentials.\nChọn System -\u0026gt; Global credentials -\u0026gt; Add Credentials.\nChọn loại Secret text -\u0026gt; dán token của SonarQube vừa copy ở bước trước -\u0026gt; nhập ID là Sonar-token -\u0026gt; Create.\n"
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.4-jkandprom/",
	"title": "Tích hợp Jenkins với Prometheus",
	"tags": [],
	"description": "",
	"content": "Để cấu hình Prometheus thu thập số liệu từ Node Exporter, chỉ cần chỉnh sửa file cấu hình prometheus.yml như sau:\nDi chuyển tới thư mục chứ file cấu hình Prometheus: cd /etc/prometheus Chỉnh sửa file cấu hình prometheus.yml: sudo vi prometheus.yml Thêm cấu hình sau vào file: - job_name: \u0026#39;node_exporter\u0026#39; static_configs: - targets: [\u0026#39;\u0026lt;your-node-exporter-ip\u0026gt;:\u0026lt;your-node-exporter-port\u0026gt;\u0026#39;] Như hình bên dưới.\nLưu và thoát file cấu hình. Kiểm tra xem cấu hình đã phù hợp chưa bằng cách chạy lệnh: promtool check config /etc/prometheus/prometheus.yml Reload cấu hình Prometheus mà không cần phải restart dịch vụ: curl -X POST http://localhost:9090/-/reload Truy cập giao diện Prometheus và kiểm tra xem số liệu từ Node Exporter đã được thu thập chưa. "
},
{
	"uri": "//localhost:1313/vi/4-cicd/",
	"title": "Triển khai CICD",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ triển khai CICD pipeline với Jenkins, sẽ bao gồm các bước cài đặt Jenkins, các plugin cần thiết, cấu hình Jenkins.\nJenkins là một công cụ mã nguồn mở giúp tự động hóa các công việc trong quá trình phát triển phần mềm. Jenkins có thể được sử dụng để tự động hóa các công việc như biên dịch mã nguồn, kiểm tra mã nguồn, triển khai ứng dụng, và nhiều công việc khác.\nNội dung: Cập nhật IAM Role Tạo S3 Bucket Tạo S3 Gateway endpoint Cấu hình Session logs "
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.5-grafana/",
	"title": "Cài đặt Grafana",
	"tags": [],
	"description": "",
	"content": "Đầu tiên, cài đặt các dependencies cần thiết:\nsudo apt-get update sudo apt-get install -y apt-transport-https software-properties-common Tải khoá GPG của Grafana và thêm vào danh sách các khoá tin cậy trên hệ thống. wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add - Thêm repository của Grafana vào hệ thống APT, giúp cài đặt hoặc cặt nhật Grafana qua APT. echo \u0026#34;deb https://packages.grafana.com/oss/deb stable main\u0026#34; | sudo tee -a /etc/apt/sources.list.d/grafana.list Cập nhật và cài đặt Grafana sudo apt-get update sudo apt-get -y install grafana Kích hoạt và khởi động dịch vụ Grafana sudo systemctl enable grafana-server sudo systemctl start grafana-server Kiểm tra trạng thái của dịch vụ Grafana sudo systemctl status grafana-server Truy cập vào Grafana qua địa chỉ IP của máy chủ với port 3000 (mặc định) và đăng nhập với tài khoản mặc định là admin và mật khẩu mặc định là admin. Hãy nhớ tạo thêm một inbound rule cho phép truy cập vào port 3000 trên Security Group của server Monitoring.\n"
},
{
	"uri": "//localhost:1313/vi/5-monitoring/",
	"title": "Monitoring",
	"tags": [],
	"description": "",
	"content": "Ở phần Monitoring này, chúng ta sẽ cài đặt server Monitoring để theo dõi các thông số của server như CPU, RAM, Disk, Network, \u0026hellip; thông qua các công cụ như Prometheus, Grafana và Node Exporter.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.5-sonarserver/",
	"title": "Thêm SonarQube server",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện chính của Jenkins, chọn Manage Jenkins -\u0026gt; System. Ở mục SonarQube servers, chọn Add SonarQube. Nhập tên là sonar-server, Server URL là đường dẫn truy cập SonarQube của bạn và Server authentication token là token bạn đã tạo ở bước trước. Sau đó nhấn Apply và Save để lưu cấu hình.\n"
},
{
	"uri": "//localhost:1313/vi/6-notification/",
	"title": "Notification",
	"tags": [],
	"description": "",
	"content": "Ở phần Notification này, chúng ta sẽ cài đặt server Notification để gửi thông báo qua email kết quả của Jenkins pipeline, các file dependency check và Trivy.\nĐầu tiên, đối với email, cần đảm bảo rằng email đã được kích hoạt cài đặt bảo mật 2 lớp. Vào phần Security của tài khoản Google, chọn 2-Step Verification và bật nó lên. Tạo app password tại đây và lưu lại. Vào cài đặt System của Jenkins, cuộn xuống phần Email Notification và điền thông tin như bên dưới. Password là app password đã tạo ở bước trước.\nĐể test thử mail có được gửi thành công hay chưa, chọn option Test configuration by sending test e-mail và chọn Test configuration. Sau khi test thành công, nhấn Apply và Save. Tạo credential thông tin email và password để sử dụng trong Jenkins pipeline như dưới đây. Quay trở lại cài đặt System của Jenkins, cuộn xuống phần Extended E-mail Notification và điền thông tin như bên dưới. Sau khi điền đầy đủ thông tin, nhấn Apply và Save. Quay lại mục Configure của pipeline DevSecOps tạo ở bước trước. Trong Pipeline Script, thêm đoạn script sau để gửi email thông báo kết quả của pipeline. post { always { emailext attachLog: true, subject: \u0026#34;\u0026#39;${currentBuild.result}\u0026#39;\u0026#34;, body: \u0026#34;Project: ${env.JOB_NAME} \u0026lt;br/\u0026gt;\u0026#34;, \u0026#34;Build Number: ${env.BUILD_NUMBER} \u0026lt;br/\u0026gt;\u0026#34;, \u0026#34;URL: ${env.BUILD_URL} \u0026lt;br/\u0026gt;\u0026#34;, to: \u0026#34;ngacbaohan@gmail.com\u0026#34;, attachmentsPattern: \u0026#39;trivyfs.txt, trivyimage.txt\u0026#39; } } Đoạn script được đặt như bên hình dưới. Nhấn Save để lưu lại cấu hình. Bây giờ, chạy lại pipeline DevSecOps và kiểm tra xem email có được gửi thành công hay không. Kiểm tra trong Email đã nhận được thông báo kết quả của pipeline. Vậy là đã cài đặt xong thông báo qua email cho Jenkins pipeline.\n"
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.6-adddatasource/",
	"title": "Thêm Prometheus Data Source cho Grafana",
	"tags": [],
	"description": "",
	"content": "Tại giao diện chính của Grafana sau khi hoàn tất tạo user, chọn DATA SOURCES.\nChọn Prometheus. Tại giao diện cấu hình prometheus, dán Prometheus server URL đã truy cập trước đấy vào mục Connection. Sau đó nhấn Save \u0026amp; Test. Như vậy đã hoàn tất việc thêm Prometheus Data Source cho Grafana. "
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.6-sonarscanner/",
	"title": "Thêm SonarQube Scanner",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện chính của Jenkins, chọn Manage Jenkins -\u0026gt; Tools. Ở mục SonarQube Scanner installations, chọn Add SonarQube Scanner. Đặt tên là sonar-scanner, còn lại là mặc định. Sau đó nhấn Apply và Save để lưu cấu hình.\n"
},
{
	"uri": "//localhost:1313/vi/7-ekssection/",
	"title": "EKS",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tạo EKS cluster và cài đặt các công cụ cần thiết.\nNội dung 3.1. Cài đặt SonarQube 3.2. Cài đặt Trivy\n"
},
{
	"uri": "//localhost:1313/vi/5-monitoring/5.7-dashboard/",
	"title": "Tạo Dashboard",
	"tags": [],
	"description": "",
	"content": "Quay lại giao diện chính của Grafana, chọn DASHBOARDS.\nChọn Import a dashboard. Truy cập vào Node Exporter Full, chọn Copy ID to clipboard. Quay lại giao diện Import a dashboard của Grafana, dán ID vừa copy vào mục Grafana.com Dashboard và nhấn Load. Tại mục Prometheus, chọn Prometheus Data Source đã được thêm trước đó. Sau đó nhấn Import. Như vậy đã hoàn tất việc tạo Dashboard cho Node Exporter. Làm tương tự để tạo Dashboard cho Jenkins, đầu tiên chúng ta cần cài đặt Plugin cho Jenkins, sau đó restart lại Jenkins. Truy cập vào đường dẫn của Jenkins với path là /prometheus để kiểm tra xem Jenkins đã được Prometheus thu thập số liệu chưa. Làm tương tự như bước cấu hình Prometheus thu thập metrics từ Node Exporter, chỉ cần chỉnh sửa file cấu hình prometheus.yml để cấu hình Prometheus thu thập thông tin của Jenkins. Kiểm tra các Targets đã được cấu hình trong Prometheus, chúng ta đã thêm thành công Jenkins vào Prometheus. Làm tương tự để import Dashboard cho Jenkins như dưới đây. Vậy là đã tạo thành công hai dashboard cho Node Exporter và Jenkins trên Grafana.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.7-sonarproject/",
	"title": "Tạo SonarQube project",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện chính của SonarQube, chọn Projects -\u0026gt; Manually. Nhập tên project là DevSecOps, Project key là DevSecOps, Main branch name là main. Sau đó nhấn Set Up để tạo project.\nTiếp theo, chọn Locally.\nỞ phần Provide a token, chọn Generate -\u0026gt; Continue. Sẽ có một đoạn script được hiển thị để thực thi SonarQube Scanner.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.8-owasp/",
	"title": "Cài đặt và cấu hình plugin OWASP Dependency-Check",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện cài đặt plugin của Jenkins như đã hướng dẫn ở bước trước, tìm kiếm plugin OWASP Dependency-Check và cài đặt.\nVào cấu hình Tools của Jenkins, chọn Add OWASP Dependency-Check. Đặt tên là DP-Check, chọn Install automatically -\u0026gt; Add Installer -\u0026gt; Install from github.com. Nhấn Apply và Save để lưu cấu hình.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.9-docker/",
	"title": "Cài đặt và cấu hình plugin Docker",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện cài đặt plugin của Jenkins như đã hướng dẫn ở bước trước, tìm kiếm plugin Docker và cài đặt các plugins sau.\nĐể có thể push Docker image lên Docker Hub, cần cấu hình thông tin credential của Docker Hub. Thực hiện tạo mới credential như bước trước.\nVào cấu hình Tools của Jenkins, chọn Add Docker. Đặt tên là docker, chọn Install automatically -\u0026gt; Add Installer -\u0026gt; Download from docker.com. Nhấn Apply và Save để lưu cấu hình.\n"
},
{
	"uri": "//localhost:1313/vi/4-cicd/4.10-pipeline/",
	"title": "Khởi tạo Jenkins pipeline",
	"tags": [],
	"description": "",
	"content": "Truy cập giao diện chính của Jenkins, chọn New Item -\u0026gt; Pipeline. Đặt tên cho pipeline là DevSecOps, chọn OK.\nCuộn xuống mục Pipeline và copy Pipeline script dưới đây vào mục Script.\npipeline{ agent any tools{ jdk \u0026#39;jdk17\u0026#39; nodejs \u0026#39;node16\u0026#39; } environment { SCANNER_HOME=tool \u0026#39;sonar-scanner\u0026#39; } stages { stage(\u0026#39;clean workspace\u0026#39;){ steps{ cleanWs() } } stage(\u0026#39;Checkout from Git\u0026#39;){ steps{ git branch: \u0026#39;main\u0026#39;, url: \u0026#39;https://github.com/nghialmgcd201527/Workshop-DevSecOps.git\u0026#39; } } stage(\u0026#34;Sonarqube Analysis \u0026#34;){ steps{ withSonarQubeEnv(\u0026#39;sonar-server\u0026#39;) { sh \u0026#39;\u0026#39;\u0026#39; $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=DevSecOps \\ -Dsonar.projectKey=DevSecOps \u0026#39;\u0026#39;\u0026#39; } } } stage(\u0026#34;quality gate\u0026#34;){ steps { script { waitForQualityGate abortPipeline: false, credentialsId: \u0026#39;Sonar-token\u0026#39; } } } stage(\u0026#39;Install Dependencies\u0026#39;) { steps { sh \u0026#34;npm install\u0026#34; } } stage(\u0026#39;OWASP FS SCAN\u0026#39;) { steps { dependencyCheck additionalArguments: \u0026#39;--scan ./ --disableYarnAudit --disableNodeAudit\u0026#39;, odcInstallation: \u0026#39;DP-Check\u0026#39; dependencyCheckPublisher pattern: \u0026#39;**/dependency-check-report.xml\u0026#39; } } stage(\u0026#39;TRIVY FS SCAN\u0026#39;) { steps { sh \u0026#34;trivy fs . \u0026gt; trivyfs.txt\u0026#34; } } stage(\u0026#34;Docker Build \u0026amp; Push\u0026#34;){ steps{ script{ withDockerRegistry(credentialsId: \u0026#39;docker\u0026#39;, toolName: \u0026#39;docker\u0026#39;){ sh \u0026#34;docker build -t devsecops .\u0026#34; sh \u0026#34;docker tag devsecops nghialmgcd201527/devsecops:latest \u0026#34; sh \u0026#34;docker push nghialmgcd201527/devsecops:latest \u0026#34; } } } } stage(\u0026#34;TRIVY\u0026#34;){ steps{ sh \u0026#34;trivy image nghialmgcd201527/devsecops:latest \u0026gt; trivyimage.txt\u0026#34; } } stage(\u0026#39;Deploy to container\u0026#39;){ steps{ sh \u0026#39;docker run -d --name devsecops -p 8081:3000 nghialmgcd201527/devsecops:latest\u0026#39; } } } } Nhấn Apply và Save để lưu cấu hình. Tại trang của pipeline, nhấn Build Now để chạy pipeline.\nTruy cập vào Pipeline Overview để xem tiến trình của pipeline.\nNếu các bạn gặp lỗi docker login failed như dưới đây.\nHãy kiểm tra lại thông tin credential của Docker Hub đã được cấu hình đúng chưa, nếu đúng rồi thì hãy cấp quyền cho Jenkins chạy Docker và khởi động lại Jenkins để áp dụng cấu hình mới.\nsudo su sudo usermod -aG docker jenkins sudo systemctl restart jenkins Hãy thử chạy lại pipeline và kiểm tra kết quả.\nSau khi pipeline chạy xong, truy cập vào giao diện quản lí repository của Docker Hub để kiểm tra xem image đã được push lên chưa.\nVà kiểm tra ở SonarQube những issues được phát hiện.\nVậy là đã thành công bước set up Jenkins Pipeline, bây giờ đến phần Monitoring.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]